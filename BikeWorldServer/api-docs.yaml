openapi: 3.0.0

info:
  title: bike-world API
  version: '1.0'
  
servers:
  - url: https://bike-world-ids.herokuapp.com/
  
paths:

  ###################
  # route users
  ###################
  /api/v1/users/login:
    post:
      summary: Authenticate and get a new token.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'user1'
                password:
                  type: string
                  example: 'user_password'
      responses:
        '200':
          description: Token sucessfully created
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success: 
                    type: boolean
                    example: true
                  message: 
                    type: string
                    example: 'Token sucessfully created'
                  token: 
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0b3B0YWwuY29tIiwiZXhwIjoxNDI2NDIwODAwLCJodHRwOi8vdG9wdGFsLmNvbS9qd3RfY2xhaW1zL2lzX2FkbWluIjp0cnVlLCJjb21wYW55IjoiVG9wdGFsIiwiYXdlc29tZSI6dHJ1ZX0.yRQYnWzskCZUxPwaQupWkiUzKELZ49eM7oWxAQK_ZXw'
                  permissions: 
                    type: boolean
                    example: false
                  username: 
                    type: string
                    example: 'user1'
                  id: 
                    type: string
                    example: '627fb15a85bebd50ab3197a5'
                  self: 
                    type: string
                    example: '/api/v1/users/627fb15a85bebd50ab3197a5'
        '400':
          description: User not found.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success: 
                    type: boolean
                    example: false
                  message: 
                    type: string
                    example: 'Authentication failed. User not found.'
        '400':
          description: Wrong username or password.
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  success: 
                    type: boolean
                    example: false
                  message: 
                    type: string
                    example: 'Authentication failed. Wrong username or password.' 

  /api/v1/users/signUp:
    post:
      summary: Creates a new bike-world accont.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'user1'
                email:
                  type: string
                  example: 'user1@domain.com'
                password:
                  type: string
                  example: 'user_password'
                target:
                  type: string
                  example: 'principiante'
      responses:
        '201':
          description: Account successfully created.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success: 
                    type: boolean
                    example: true
                  message: 
                    type: string
                    example: 'Signup completed!'
                  token: 
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0b3B0YWwuY29tIiwiZXhwIjoxNDI2NDIwODAwLCJodHRwOi8vdG9wdGFsLmNvbS9qd3RfY2xhaW1zL2lzX2FkbWluIjp0cnVlLCJjb21wYW55IjoiVG9wdGFsIiwiYXdlc29tZSI6dHJ1ZX0.yRQYnWzskCZUxPwaQupWkiUzKELZ49eM7oWxAQK_ZXw'
                  permissions: 
                    type: boolean
                    example: false
                  username: 
                    type: string
                    example: 'user1'
                  id: 
                    type: string
                    example: '627fb15a85bebd50ab3197a5'
                  self: 
                    type: string
                    example: '/api/v1/users/627fb15a85bebd50ab3197a5'
        '409':
          description: Signup failed. User already exists.
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  success: 
                    type: boolean
                    example: false
                  message: 
                    type: string
                    example: 'Signup failed. User already exists.' 

  /api/v1/users/{id}:
    get:
      summary: Get User info.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to return.
          schema:
            type: string
            example: '627fb15a85bebd50ab3197a5'
        - name: x-access-token
          in: header
          required: true
          description: The jwt of the session.
          schema:
            type: string
            example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0b3B0YWwuY29tIiwiZXhwIjoxNDI2NDIwODAwLCJodHRwOi8vdG9wdGFsLmNvbS9qd3RfY2xhaW1zL2lzX2FkbWluIjp0cnVlLCJjb21wYW55IjoiVG9wdGFsIiwiYXdlc29tZSI6dHJ1ZX0.yRQYnWzskCZUxPwaQupWkiUzKELZ49eM7oWxAQK_ZXw'
      responses:
        '200':
          description: Get User info.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  self: 
                    type: string
                    example: '/api/v1/users/627fb15a85bebd50ab3197a5'
                  id: 
                    type: string
                    example: '627fb15a85bebd50ab3197a5'
                  username: 
                    type: string
                    example: 'user1'
                  email: 
                    type: string
                    example: 'user1@domain.com'
                  target: 
                    type: string
                    example: 'user1'
                  permissions: 
                    type: boolean
                    example: false
        '403':
          description: Unauthorized. You can access only your informations.
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  success: 
                    type: boolean
                    example: false
                  message: 
                    type: string
                    example: 'Unauthorized. You can access only your informations.' 
 
  /api/v1/users/{id}:
    put:
      summary: Update User info.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to update.
          schema:
            type: string
            example: '627fb15a85bebd50ab3197a5'
        - name: x-access-token
          in: header
          required: true
          description: The jwt of the session.
          schema:
            type: string
            example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0b3B0YWwuY29tIiwiZXhwIjoxNDI2NDIwODAwLCJodHRwOi8vdG9wdGFsLmNvbS9qd3RfY2xhaW1zL2lzX2FkbWluIjp0cnVlLCJjb21wYW55IjoiVG9wdGFsIiwiYXdlc29tZSI6dHJ1ZX0.yRQYnWzskCZUxPwaQupWkiUzKELZ49eM7oWxAQK_ZXw'
      responses:
        '200':
          description: Get User info.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success: 
                    type: boolean
                    example: true
                  message: 
                    type: string
                    example: 'Information updated!'
                  token: 
                    type: string
                    description: The new token, since the user changed.
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0b3B0YWwuY29tIiwiZXhwIjoxNDI2NDIwODAwLCJodHRwOi8vdG9wdGFsLmNvbS9qd3RfY2xhaW1zL2lzX2FkbWluIjp0cnVlLCJjb21wYW55IjoiVG9wdGFsIiwiYXdlc29tZSI6dHJ1ZX0.yRQYnWzskCZUxPwaQupWkiUzKELZ49eM7oWxAQK_ZXw'
                  permissions: 
                    type: boolean
                    example: false
                  username: 
                    type: string
                    example: 'user1'
                  id: 
                    type: string
                    example: '627fb15a85bebd50ab3197a5'
                  self: 
                    type: string
                    example: '/api/v1/users/627fb15a85bebd50ab3197a5'
        '403':
          description: Unauthorized. You can update only your informations.
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  success: 
                    type: boolean
                    example: false
                  message: 
                    type: string
                    example: 'Unauthorized. You can access only your informations.'                     

  ###################
  # route bikes
  ###################
  /api/v1/bikes:
    post:
      summary: Add a new bike.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: 'COD01'
                model:
                  type: string
                  example: 'Modello 1'
                type:
                  type: string
                  example: 'Tipo 1'
                rentalPointName:
                  type: string
                  example: 'Punto Ritiro Trento nord'
      responses:
        '200':
          description: Bike added successfully.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success: 
                    type: boolean
                    example: true
                  message: 
                    type: string
                    example: 'New Bike added'
        '409':
          description: Conflict. Bike already exists.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success: 
                    type: boolean
                    example: false
                  message: 
                    type: string
                    example: 'Creation bike failed. Bike already exists.'

  /api/v1/bikes:
    get:
      summary: Get bikes.
      responses:
        '200':
          description: List of the bikes.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id: 
                      type: string
                      example: "628548c22119863b28fb368f"
                    code:
                      type: string
                      example: "Ax26"
                    model:
                      type: string
                      example: "Bianchi"
                    type:
                      type: string
                      example: "E-bike"
                    rentalPointName:
                      type: string
                      example: "Nord Milano2"
                    state:
                      type: boolean
                      example: true
                    __v:
                      type: integer
                      description: description ???
                      example: 0

  /api/v1/bikes/code:
    get:
      summary: Get bike searched by code.
      parameters:
        - name: code
          in: path
          required: true
          description: The code of the bike to return.
          schema:
            type: string
            example: 'Ax26'
      responses:
        '200':
          description: Bike with the specific code.
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id: 
                    type: string
                    example: "628548c22119863b28fb368f"
                  code:
                    type: string
                    example: "Ax26"
                  model:
                    type: string
                    example: "Bianchi"
                  type:
                    type: string
                    example: "E-bike"
                  rentalPointName:
                    type: string
                    example: "Nord Milano2"
                  state:
                    type: boolean
                    example: true
                  __v:
                    type: integer
                    description: description ???
                    example: 0                      

  /api/v1/bikes:
    delete:
      summary: Remove bike.
      parameters:
        - name: code
          in: path
          required: true
          description: The code of the bike to delete.
          schema:
            type: string
            example: 'Ax26'
      responses:
        '200':
          description: Bike deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Bike deleted!"

  /api/v1/bikes:
    put:
      summary: Repare a bike.
      description: Based on the status of a bike, puts or removes it from repair.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: 'Ax26'
                rentalPointName:
                  type: string
                  example: 'Nord Milano2'
      responses:
        '200':
          description: Bike status changed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Bike repared!"

  ###################
  # route rental
  ###################
  /api/v1/rentals:
    post:
      summary: Add a new rental point.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Est Milano'
                address:
                  type: string
                  example: 'ds'
                lat:
                  type: number
                  example: 44.9654219
                lng:
                  type: number
                  example:  9.1859243
                type:
                  type: string
                  example: "Negozio"
      responses:
        '200':
          description: Rental Point added successfully.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success: 
                    type: boolean
                    example: true
                  message: 
                    type: string
                    example: 'New Rental Point added!'
        '409':
          description: Conflict. Rental Point already exists.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success: 
                    type: boolean
                    example: false
                  message: 
                    type: string
                    example: 'Creation rental point failed. Rental point already exists.'

  /api/v1/rentals:
    get:
      summary: Get rental points.
      responses:
        '200':
          description: List of the rental points.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id: 
                      type: string
                      example: "627fb874a991e0a164e063ac"
                    name:
                      type: string
                      example: "Est Milano"
                    address:
                      type: string
                      example: "ds"
                    lat: 
                      type: number
                      example: 45.4654219
                    lng: 
                      type: number
                      example: 10.1859243
                    type:
                      type: string
                      example: "Negozio"
                    bikeNumber:
                      type: integer
                      example: 0
                    __v:
                      type: integer
                      description: description ???
                      example: 0

  /api/v1/rentals/name:
    get:
      summary: Get rental points names.
      responses:
        '200':
          description: List of the rental point names.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id: 
                      type: string
                      example: "627fb874a991e0a164e063ac"
                    name:
                      type: string
                      example: "Est Milano"

  /api/v1/rentals:
    delete:
      summary: Remove a rental point.
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the rental point to delete.
          schema:
            type: string
            example: 'Ax26'
      responses:
        '200':
          description: Rental point deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Rental Point deleted!"

  /api/v1/rentals:
    put:
      summary: Update a rental point.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Est Milano'
                address:
                  type: string
                  example: 'ds'
                lat:
                  type: number
                  example: 44.9654219
                lng:
                  type: number
                  example:  9.1859243
                type:
                  type: string
                  example: "Negozio"
      responses:
        '200':
          description: Rental point updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Rental point info updated!"

  /api/v1/rentals/type:
    get:
      summary: Get rental point by type.
      parameters:
        - name: type
          in: path
          required: true
          description: The type of the rental points to return.
          schema:
            type: string
            example: 'Negozio'
      responses:
        '200':
          description: List of the rental points with a specific type.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id: 
                      type: string
                      example: "627fb874a991e0a164e063ac"
                    name:
                      type: string
                      example: "Est Milano"
                    address:
                      type: string
                      example: "ds"
                    lat: 
                      type: number
                      example: 45.4654219
                    lng: 
                      type: number
                      example: 10.1859243
                    type:
                      type: string
                      example: "Negozio"
                    bikeNumber:
                      type: integer
                      example: 0
                    __v:
                      type: integer
                      description: description ???
                      example: 0

  /api/v1/rentals/date:
    get:
      summary: Get rental point based on the bike availability.
      parameters:
        - name: date
          in: path
          required: true
          description: The date used to check the bike availability.
          schema:
            type: string
            example: '2022-05-20'
      responses:
        '200':
          description: List of the rental points that are available in a specific date.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id: 
                      type: string
                      example: "627fb874a991e0a164e063ac"
                    name:
                      type: string
                      example: "Est Milano"
                    address:
                      type: string
                      example: "ds"
                    lat: 
                      type: number
                      example: 45.4654219
                    lng: 
                      type: number
                      example: 10.1859243
                    type:
                      type: string
                      example: "Negozio"
                    bikeNumber:
                      type: integer
                      example: 0
                    __v:
                      type: integer
                      description: description ???
                      example: 0

  ###################
  # route bookings
  ###################
  /api/v1/bookings:
    post:
      summary: Add a new booking.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  example: '2022-05-20'
                rentalPointName:
                  type: string
                  example: 'Est Milano'
                username:
                  type: string
                  example: 'User1'
                bikeCode:
                  type: string
                  example: 'Ax26'
      responses:
        '200':
          description: Booking added successfully.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success: 
                    type: boolean
                    example: true
                  message: 
                    type: string
                    example: 'New Booking added!'
        '409':
          description: Conflict. No bikes.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success: 
                    type: boolean
                    example: false
                  message: 
                    type: string
                    example: 'Non ci sono biciclette disponibili'

  /api/v1/bookings:
    get:
      summary: Get bookings of a specific user.
      parameters:
        - name: username
          in: path
          required: true
          description: The username.
          schema:
            type: string
            example: 'User1'
      responses:
        '200':
          description: List of the bookings.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  _id: 
                    type: string
                    example: "628548d32119863b28fb369d"
                  username: 
                    type: string
                    example: "admin"
                  date: 
                    type: string
                    example: "2022-05-26T00:00:00.000Z"
                  bikeCode: 
                    type: string
                    example: "Ax26"
                  releaseBikeCode:
                    type: integer
                    example: 727786
                  rentalPointName: 
                    type: string
                    example: "Nord Milano2"
                  __v:
                    type: integer
                    example: 0

  /api/v1/bookings/bikeAvaiable:
    get:
      summary: Get bikes of a rentalPoint available in a day
      parameters:
        - name: rentalPointName
          in: path
          required: true
          description: The rental point name.
          schema:
            type: string
            example: 'Est Milano'
        - name: date
          in: path
          required: true
          description: The date.
          schema:
            type: string
            example: '2022-05-20' 
      responses:
        '200':
          description: List of the bikes.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id: 
                      type: string
                      example: "628548c22119863b28fb368f"
                    code:
                      type: string
                      example: "Ax26"
                    model:
                      type: string
                      example: "Bianchi"
                    type:
                      type: string
                      example: "E-bike"
                    rentalPointName:
                      type: string
                      example: "Nord Milano2"
                    state:
                      type: boolean
                      example: true
                    __v:
                      type: integer
                      description: description ???
                      example: 0

  /api/v1/bookings:
    delete:
      summary: Remove a booking.
      parameters:
        - name: _id
          in: path
          required: true
          description: The id to delete.
          schema:
            type: string
            example: '627fb874a991e0a164e063ac'
      responses:
        '200':
          description: Booking deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Booking deleted!"